generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin and User
model Admin {
  id                 String    @id @default(cuid())
  firstname          String
  lastname           String
  email              String    @unique
  password           String
  resetPwToken       String?
  resetPwTokenExpiry DateTime?
}

model User {
  id                 String    @id @default(cuid())
  firstname          String
  lastname           String
  email              String    @unique
  password           String
  resetPwToken       String?
  resetPwTokenExpiry DateTime?

  reviews Review[]
  orders  Order[]

  createdAt DateTime @default(now())
}

// Product, Category, Sub-Category
model Product {
  id          String         @id @default(cuid())
  name        String
  price       Int
  description String
  images      ProductImage[]
  sizes       Size[]
  stock       Int            @default(0)

  reviews       Review[]
  subCategories SubCategoryToProduct[]
  OrderItem     OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Size {
  XS
  S
  M
  L
  XL
}

model Category {
  id    String         @id @default(cuid())
  name  String
  image CategoryImage?

  subCategories SubCategory[]
}

model SubCategory {
  id    String            @id @default(cuid())
  name  String
  image SubCategoryImage?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  products SubCategoryToProduct[]
}

model SubCategoryToProduct {
  id            String      @id @default(cuid())
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
}

model ProductImage {
  id        String @id @default(cuid())
  public_id String
  url       String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model CategoryImage {
  id        String @id @default(cuid())
  public_id String
  url       String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique
}

model SubCategoryImage {
  id        String @id @default(cuid())
  public_id String
  url       String

  category   SubCategory @relation(fields: [categoryId], references: [id])
  categoryId String      @unique
}

// Order, Shipping Info, Order Item, Payment Info
model Order {
  id              String        @id @default(cuid())
  itemsPrice      Int
  taxAmount       Int
  shippingAmount  Int
  totalAmount     Int
  shppingAddress  String
  shippingCity    String
  shippingZipCode String
  shippingCountry String
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus

  orderItems OrderItem[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  orderStatus OrderStatus @default(Processing)
  deliveredAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  Card
  Paypal
  COD
}

enum PaymentStatus {
  NotPaid
  Paid
}

enum OrderStatus {
  Processing
  Shipped
  Delivered
}

model OrderItem {
  id       String @id @default(cuid())
  name     String
  image    String
  price    Int
  quantity String

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Review
model Review {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
}
